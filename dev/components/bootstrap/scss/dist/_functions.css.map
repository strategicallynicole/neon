{"version":3,"names":[],"mappings":"","sources":["_functions.scss"],"sourcesContent":["// Bootstrap functions\n//\n// Utility mixins and functions for evaluating source code across our variables, maps, and mixins.\n// Ascending\n// Used to evaluate Sass maps like our grid breakpoints.\n@mixin _assert-ascending($map, $map-name) {\n    $prev-key: null;\n    $prev-num: null;\n    @each $key,\n    $num in $map {\n        @if $prev-num==null or unit($num)==\"%\" {\n            // Do nothing\n        }\n        @else if not comparable($prev-num, $num) {\n            @warn \"Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !\";\n        }\n        @else if $prev-num>=$num {\n            @warn \"Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !\";\n        }\n        $prev-key: $key;\n        $prev-num: $num;\n    }\n}\n\n// Starts at zero\n// Used to ensure the min-width of the lowest breakpoint starts at 0.\n@mixin _assert-starts-at-zero($map, $map-name: \"$grid-breakpoints\") {\n    $values: map-values($map);\n    $first-value: nth($values, 1);\n    @if $first-value !=0 {\n        @warn \"First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.\";\n    }\n}\n\n// Replace `$search` with `$replace` in `$string`\n// Used on our SVG icon backgrounds for custom forms.\n//\n// @author Hugo Giraudel\n// @param {String} $string - Initial string\n// @param {String} $search - Substring to replace\n// @param {String} $replace ('') - New value\n// @return {String} - Updated string\n@function str-replace($string, $search, $replace: \"\") {\n    $index: str-index($string, $search);\n    @if $index {\n        @return str-slice($string, 1, $index - 1)+$replace+str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n    }\n    @return $string;\n}\n\n// Color contrast\n@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {\n    $r: red($color);\n    $g: green($color);\n    $b: blue($color);\n    $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n    @if ($yiq >=$yiq-contrasted-threshold) {\n        @return $dark;\n    }\n    @else {\n        @return $light;\n    }\n}\n\n// Retrieve color Sass maps\n@function color($key: \"blue\") {\n    @return map-get($colors, $key);\n}\n\n@function theme-color($key: \"primary\") {\n    @return map-get($theme-colors, $key);\n}\n\n@function gray($key: \"100\") {\n    @return map-get($grays, $key);\n}\n\n// Request a theme color level\n@function theme-color-level($color-name: \"primary\", $level: 0) {\n    $color: theme-color($color-name);\n    $color-base: if($level > 0, $black, $white);\n    $level: abs($level);\n    @return mix($color-base, $color, $level * $theme-color-interval);\n}"],"file":"_functions.css"}